
serialServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000001ce  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000100  00800100  00800100  00000262  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000009c7  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000058  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000002f0  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001b7  00000000  00000000  00000d3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000331  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000b0  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001f5  00000000  00000000  000012d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000021e  00000000  00000000  000014cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000048  00000000  00000000  000016eb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	22 e0       	ldi	r18, 0x02	; 2
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a0 30       	cpi	r26, 0x00	; 0
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	74 d0       	rcall	.+232    	; 0x192 <main>
  aa:	8f c0       	rjmp	.+286    	; 0x1ca <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <initServoSerial>:
	//servoRx;
	
}

void servoGoto(double angle, int16_t speed)
{
  ae:	10 92 cd 00 	sts	0x00CD, r1
  b2:	87 e7       	ldi	r24, 0x77	; 119
  b4:	80 93 cc 00 	sts	0x00CC, r24
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	80 93 c9 00 	sts	0x00C9, r24
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 ca 00 	sts	0x00CA, r24
  c4:	54 9a       	sbi	0x0a, 4	; 10
  c6:	08 95       	ret

000000c8 <servoCheckTxReady>:
  c8:	80 91 c8 00 	lds	r24, 0x00C8
  cc:	80 72       	andi	r24, 0x20	; 32
  ce:	08 95       	ret

000000d0 <servolWriteByte>:
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	f9 df       	rcall	.-14     	; 0xc8 <servoCheckTxReady>
  d6:	88 23       	and	r24, r24
  d8:	e9 f3       	breq	.-6      	; 0xd4 <servolWriteByte+0x4>
  da:	c0 93 ce 00 	sts	0x00CE, r28
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <sendServoPacket>:
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	9f ef       	ldi	r25, 0xFF	; 255
  ec:	90 93 00 01 	sts	0x0100, r25
  f0:	90 93 01 01 	sts	0x0101, r25
  f4:	80 93 02 01 	sts	0x0102, r24
  f8:	84 2f       	mov	r24, r20
  fa:	8e 5f       	subi	r24, 0xFE	; 254
  fc:	80 93 03 01 	sts	0x0103, r24
 100:	60 93 04 01 	sts	0x0104, r22
 104:	44 23       	and	r20, r20
 106:	c1 f1       	breq	.+112    	; 0x178 <sendServoPacket+0x96>
 108:	e0 e8       	ldi	r30, 0x80	; 128
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	a5 e0       	ldi	r26, 0x05	; 5
 10e:	b1 e0       	ldi	r27, 0x01	; 1
 110:	83 50       	subi	r24, 0x03	; 3
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	8f 57       	subi	r24, 0x7F	; 127
 116:	9e 4f       	sbci	r25, 0xFE	; 254
 118:	21 91       	ld	r18, Z+
 11a:	2d 93       	st	X+, r18
 11c:	e8 17       	cp	r30, r24
 11e:	f9 07       	cpc	r31, r25
 120:	d9 f7       	brne	.-10     	; 0x118 <sendServoPacket+0x36>
 122:	4a 5f       	subi	r20, 0xFA	; 250
 124:	24 2f       	mov	r18, r20
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	21 50       	subi	r18, 0x01	; 1
 12a:	31 09       	sbc	r19, r1
 12c:	23 30       	cpi	r18, 0x03	; 3
 12e:	31 05       	cpc	r19, r1
 130:	34 f5       	brge	.+76     	; 0x17e <sendServoPacket+0x9c>
 132:	82 e0       	ldi	r24, 0x02	; 2
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	60 e0       	ldi	r22, 0x00	; 0
 138:	0b c0       	rjmp	.+22     	; 0x150 <sendServoPacket+0x6e>
 13a:	fc 01       	movw	r30, r24
 13c:	e0 50       	subi	r30, 0x00	; 0
 13e:	ff 4f       	sbci	r31, 0xFF	; 255
 140:	80 81       	ld	r24, Z
 142:	68 0f       	add	r22, r24
 144:	5f 5f       	subi	r21, 0xFF	; 255
 146:	85 2f       	mov	r24, r21
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	82 17       	cp	r24, r18
 14c:	93 07       	cpc	r25, r19
 14e:	ac f3       	brlt	.-22     	; 0x13a <sendServoPacket+0x58>
 150:	fc 01       	movw	r30, r24
 152:	e0 50       	subi	r30, 0x00	; 0
 154:	ff 4f       	sbci	r31, 0xFF	; 255
 156:	60 95       	com	r22
 158:	60 83       	st	Z, r22
 15a:	44 23       	and	r20, r20
 15c:	a9 f0       	breq	.+42     	; 0x188 <sendServoPacket+0xa6>
 15e:	c0 e0       	ldi	r28, 0x00	; 0
 160:	d1 e0       	ldi	r29, 0x01	; 1
 162:	41 50       	subi	r20, 0x01	; 1
 164:	04 2f       	mov	r16, r20
 166:	10 e0       	ldi	r17, 0x00	; 0
 168:	0f 5f       	subi	r16, 0xFF	; 255
 16a:	1e 4f       	sbci	r17, 0xFE	; 254
 16c:	89 91       	ld	r24, Y+
 16e:	b0 df       	rcall	.-160    	; 0xd0 <servolWriteByte>
 170:	c0 17       	cp	r28, r16
 172:	d1 07       	cpc	r29, r17
 174:	d9 f7       	brne	.-10     	; 0x16c <sendServoPacket+0x8a>
 176:	08 c0       	rjmp	.+16     	; 0x188 <sendServoPacket+0xa6>
 178:	25 e0       	ldi	r18, 0x05	; 5
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	46 e0       	ldi	r20, 0x06	; 6
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	52 e0       	ldi	r21, 0x02	; 2
 186:	d9 cf       	rjmp	.-78     	; 0x13a <sendServoPacket+0x58>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	08 95       	ret

00000192 <main>:
			
}

int main(void)
{
	initServoSerial();
 192:	8d df       	rcall	.-230    	; 0xae <initServoSerial>
	
	servoRx;
 194:	5c 98       	cbi	0x0b, 4	; 11
	
	
	//set servo angle
	gServoParameters[0] = 0x1E;
 196:	8e e1       	ldi	r24, 0x1E	; 30
 198:	80 93 80 01 	sts	0x0180, r24
	gServoParameters[1] = 0x00;
 19c:	10 92 81 01 	sts	0x0181, r1
	gServoParameters[2] = 0x02;
 1a0:	82 e0       	ldi	r24, 0x02	; 2
 1a2:	80 93 82 01 	sts	0x0182, r24
	gServoParameters[3] = 0x00;
 1a6:	10 92 83 01 	sts	0x0183, r1
	gServoParameters[4] = 0x02;
 1aa:	80 93 84 01 	sts	0x0184, r24
	
	
	
	while(1)
	{
		 sendServoPacket(0x05, INST_WRITE, 5);
 1ae:	45 e0       	ldi	r20, 0x05	; 5
 1b0:	63 e0       	ldi	r22, 0x03	; 3
 1b2:	85 e0       	ldi	r24, 0x05	; 5
 1b4:	96 df       	rcall	.-212    	; 0xe2 <sendServoPacket>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b6:	2f ef       	ldi	r18, 0xFF	; 255
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	9c e1       	ldi	r25, 0x1C	; 28
 1bc:	21 50       	subi	r18, 0x01	; 1
 1be:	80 40       	sbci	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	e1 f7       	brne	.-8      	; 0x1bc <main+0x2a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <main+0x34>
 1c6:	00 00       	nop
 1c8:	f2 cf       	rjmp	.-28     	; 0x1ae <main+0x1c>

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>

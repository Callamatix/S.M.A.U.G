
kommunikationsmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000376  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000376  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000050b  00800100  00800100  0000040a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b6f  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000088  00000000  00000000  00000b9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000612  00000000  00000000  00000c26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000025e  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000527  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001b8  00000000  00000000  000019c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000242  00000000  00000000  00001b78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000726  00000000  00000000  00001dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000024e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c1       	rjmp	.+588    	; 0x29e <__vector_20>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e7       	ldi	r30, 0x76	; 118
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ab 30       	cpi	r26, 0x0B	; 11
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	dc d0       	rcall	.+440    	; 0x27c <main>
  c4:	56 c1       	rjmp	.+684    	; 0x372 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <init>:
	}
	WriteByte(0x00);
	WriteByte(0x00);
	WriteByte(0x7e);
	
}
  c8:	81 b1       	in	r24, 0x01	; 1
  ca:	83 60       	ori	r24, 0x03	; 3
  cc:	81 b9       	out	0x01, r24	; 1
  ce:	10 92 0a 06 	sts	0x060A, r1
  d2:	10 92 09 06 	sts	0x0609, r1
  d6:	08 95       	ret

000000d8 <initSerial>:
  d8:	10 92 c5 00 	sts	0x00C5, r1
  dc:	89 e0       	ldi	r24, 0x09	; 9
  de:	80 93 c4 00 	sts	0x00C4, r24
  e2:	88 e9       	ldi	r24, 0x98	; 152
  e4:	80 93 c1 00 	sts	0x00C1, r24
  e8:	86 e0       	ldi	r24, 0x06	; 6
  ea:	80 93 c2 00 	sts	0x00C2, r24
  ee:	08 95       	ret

000000f0 <CheckTxReady>:
  f0:	80 91 c0 00 	lds	r24, 0x00C0
  f4:	80 72       	andi	r24, 0x20	; 32
  f6:	08 95       	ret

000000f8 <WriteByte>:
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	f9 df       	rcall	.-14     	; 0xf0 <CheckTxReady>
  fe:	88 23       	and	r24, r24
 100:	e9 f3       	breq	.-6      	; 0xfc <WriteByte+0x4>
 102:	c0 93 c6 00 	sts	0x00C6, r28
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <crc16>:
 10a:	cf 92       	push	r12
 10c:	df 92       	push	r13
 10e:	ef 92       	push	r14
 110:	ff 92       	push	r15
 112:	0f 93       	push	r16
 114:	1f 93       	push	r17
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	66 23       	and	r22, r22
 11c:	09 f4       	brne	.+2      	; 0x120 <crc16+0x16>
 11e:	3e c0       	rjmp	.+124    	; 0x19c <crc16+0x92>
 120:	06 2f       	mov	r16, r22
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	4f ef       	ldi	r20, 0xFF	; 255
 126:	5f ef       	ldi	r21, 0xFF	; 255
 128:	ee ef       	ldi	r30, 0xFE	; 254
 12a:	ff ef       	ldi	r31, 0xFF	; 255
 12c:	c6 2e       	mov	r12, r22
 12e:	d1 2c       	mov	r13, r1
 130:	e8 2e       	mov	r14, r24
 132:	f1 2c       	mov	r15, r1
 134:	c8 e0       	ldi	r28, 0x08	; 8
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	ee 3f       	cpi	r30, 0xFE	; 254
 13a:	6f ef       	ldi	r22, 0xFF	; 255
 13c:	f6 07       	cpc	r31, r22
 13e:	19 f4       	brne	.+6      	; 0x146 <crc16+0x3c>
 140:	8e 2d       	mov	r24, r14
 142:	9f 2d       	mov	r25, r15
 144:	30 c0       	rjmp	.+96     	; 0x1a6 <crc16+0x9c>
 146:	ef 3f       	cpi	r30, 0xFF	; 255
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	f8 07       	cpc	r31, r24
 14c:	19 f4       	brne	.+6      	; 0x154 <crc16+0x4a>
 14e:	8c 2d       	mov	r24, r12
 150:	9d 2d       	mov	r25, r13
 152:	29 c0       	rjmp	.+82     	; 0x1a6 <crc16+0x9c>
 154:	df 01       	movw	r26, r30
 156:	ab 5f       	subi	r26, 0xFB	; 251
 158:	bc 4f       	sbci	r27, 0xFC	; 252
 15a:	8c 91       	ld	r24, X
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	23 c0       	rjmp	.+70     	; 0x1a6 <crc16+0x9c>
 160:	ba 01       	movw	r22, r20
 162:	68 27       	eor	r22, r24
 164:	79 27       	eor	r23, r25
 166:	60 ff       	sbrs	r22, 0
 168:	07 c0       	rjmp	.+14     	; 0x178 <crc16+0x6e>
 16a:	56 95       	lsr	r21
 16c:	47 95       	ror	r20
 16e:	68 e0       	ldi	r22, 0x08	; 8
 170:	46 27       	eor	r20, r22
 172:	64 e8       	ldi	r22, 0x84	; 132
 174:	56 27       	eor	r21, r22
 176:	02 c0       	rjmp	.+4      	; 0x17c <crc16+0x72>
 178:	56 95       	lsr	r21
 17a:	47 95       	ror	r20
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	21 50       	subi	r18, 0x01	; 1
 182:	31 09       	sbc	r19, r1
 184:	69 f7       	brne	.-38     	; 0x160 <crc16+0x56>
 186:	31 96       	adiw	r30, 0x01	; 1
 188:	e0 17       	cp	r30, r16
 18a:	f1 07       	cpc	r31, r17
 18c:	a9 f6       	brne	.-86     	; 0x138 <crc16+0x2e>
 18e:	9a 01       	movw	r18, r20
 190:	20 95       	com	r18
 192:	30 95       	com	r19
 194:	32 27       	eor	r19, r18
 196:	23 27       	eor	r18, r19
 198:	32 27       	eor	r19, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <crc16+0x96>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	82 2f       	mov	r24, r18
 1a2:	93 2f       	mov	r25, r19
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <crc16+0xa0>
 1a6:	9e 01       	movw	r18, r28
 1a8:	db cf       	rjmp	.-74     	; 0x160 <crc16+0x56>
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	0f 91       	pop	r16
 1b2:	ff 90       	pop	r15
 1b4:	ef 90       	pop	r14
 1b6:	df 90       	pop	r13
 1b8:	cf 90       	pop	r12
 1ba:	08 95       	ret

000001bc <sendPacket>:
 1bc:	0f 93       	push	r16
 1be:	1f 93       	push	r17
 1c0:	cf 93       	push	r28
 1c2:	df 93       	push	r29
 1c4:	9e e7       	ldi	r25, 0x7E	; 126
 1c6:	90 93 04 04 	sts	0x0404, r25
 1ca:	80 93 05 04 	sts	0x0405, r24
 1ce:	60 93 06 04 	sts	0x0406, r22
 1d2:	26 2f       	mov	r18, r22
 1d4:	30 e0       	ldi	r19, 0x00	; 0
 1d6:	12 16       	cp	r1, r18
 1d8:	13 06       	cpc	r1, r19
 1da:	4c f5       	brge	.+82     	; 0x22e <sendPacket+0x72>
 1dc:	e5 e0       	ldi	r30, 0x05	; 5
 1de:	f3 e0       	ldi	r31, 0x03	; 3
 1e0:	03 e0       	ldi	r16, 0x03	; 3
 1e2:	10 e0       	ldi	r17, 0x00	; 0
 1e4:	c0 e0       	ldi	r28, 0x00	; 0
 1e6:	d0 e0       	ldi	r29, 0x00	; 0
 1e8:	7d e7       	ldi	r23, 0x7D	; 125
 1ea:	50 e2       	ldi	r21, 0x20	; 32
 1ec:	90 81       	ld	r25, Z
 1ee:	49 2f       	mov	r20, r25
 1f0:	4d 57       	subi	r20, 0x7D	; 125
 1f2:	42 30       	cpi	r20, 0x02	; 2
 1f4:	80 f4       	brcc	.+32     	; 0x216 <sendPacket+0x5a>
 1f6:	d8 01       	movw	r26, r16
 1f8:	ac 5f       	subi	r26, 0xFC	; 252
 1fa:	bb 4f       	sbci	r27, 0xFB	; 251
 1fc:	ac 0f       	add	r26, r28
 1fe:	bd 1f       	adc	r27, r29
 200:	7c 93       	st	X, r23
 202:	0f 5f       	subi	r16, 0xFF	; 255
 204:	1f 4f       	sbci	r17, 0xFF	; 255
 206:	d8 01       	movw	r26, r16
 208:	ac 5f       	subi	r26, 0xFC	; 252
 20a:	bb 4f       	sbci	r27, 0xFB	; 251
 20c:	ac 0f       	add	r26, r28
 20e:	bd 1f       	adc	r27, r29
 210:	95 27       	eor	r25, r21
 212:	9c 93       	st	X, r25
 214:	06 c0       	rjmp	.+12     	; 0x222 <sendPacket+0x66>
 216:	d8 01       	movw	r26, r16
 218:	ac 5f       	subi	r26, 0xFC	; 252
 21a:	bb 4f       	sbci	r27, 0xFB	; 251
 21c:	ac 0f       	add	r26, r28
 21e:	bd 1f       	adc	r27, r29
 220:	9c 93       	st	X, r25
 222:	21 96       	adiw	r28, 0x01	; 1
 224:	31 96       	adiw	r30, 0x01	; 1
 226:	c2 17       	cp	r28, r18
 228:	d3 07       	cpc	r29, r19
 22a:	01 f7       	brne	.-64     	; 0x1ec <sendPacket+0x30>
 22c:	04 c0       	rjmp	.+8      	; 0x236 <sendPacket+0x7a>
 22e:	03 e0       	ldi	r16, 0x03	; 3
 230:	10 e0       	ldi	r17, 0x00	; 0
 232:	c0 e0       	ldi	r28, 0x00	; 0
 234:	d0 e0       	ldi	r29, 0x00	; 0
 236:	69 df       	rcall	.-302    	; 0x10a <crc16>
 238:	f8 01       	movw	r30, r16
 23a:	ec 5f       	subi	r30, 0xFC	; 252
 23c:	fb 4f       	sbci	r31, 0xFB	; 251
 23e:	ec 0f       	add	r30, r28
 240:	fd 1f       	adc	r31, r29
 242:	90 83       	st	Z, r25
 244:	81 83       	std	Z+1, r24	; 0x01
 246:	22 96       	adiw	r28, 0x02	; 2
 248:	0c 0f       	add	r16, r28
 24a:	1d 1f       	adc	r17, r29
 24c:	f8 01       	movw	r30, r16
 24e:	ec 5f       	subi	r30, 0xFC	; 252
 250:	fb 4f       	sbci	r31, 0xFB	; 251
 252:	8e e7       	ldi	r24, 0x7E	; 126
 254:	80 83       	st	Z, r24
 256:	c8 01       	movw	r24, r16
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	18 16       	cp	r1, r24
 25c:	19 06       	cpc	r1, r25
 25e:	4c f4       	brge	.+18     	; 0x272 <sendPacket+0xb6>
 260:	c4 e0       	ldi	r28, 0x04	; 4
 262:	d4 e0       	ldi	r29, 0x04	; 4
 264:	0b 5f       	subi	r16, 0xFB	; 251
 266:	1b 4f       	sbci	r17, 0xFB	; 251
 268:	89 91       	ld	r24, Y+
 26a:	46 df       	rcall	.-372    	; 0xf8 <WriteByte>
 26c:	c0 17       	cp	r28, r16
 26e:	d1 07       	cpc	r29, r17
 270:	d9 f7       	brne	.-10     	; 0x268 <sendPacket+0xac>
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <main>:

int main(void)
{
	init();
 27c:	25 df       	rcall	.-438    	; 0xc8 <init>
	initSerial();
 27e:	2c df       	rcall	.-424    	; 0xd8 <initSerial>
	sei();
 280:	78 94       	sei

	
    while(1)
    {
		PORTA ^= (1<<PORTA0);
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	82 b1       	in	r24, 0x02	; 2
 286:	89 27       	eor	r24, r25
 288:	82 b9       	out	0x02, r24	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	3f e3       	ldi	r19, 0x3F	; 63
 28e:	88 e3       	ldi	r24, 0x38	; 56
 290:	21 50       	subi	r18, 0x01	; 1
 292:	30 40       	sbci	r19, 0x00	; 0
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	e1 f7       	brne	.-8      	; 0x290 <main+0x14>
 298:	00 c0       	rjmp	.+0      	; 0x29a <main+0x1e>
 29a:	00 00       	nop
 29c:	f3 cf       	rjmp	.-26     	; 0x284 <main+0x8>

0000029e <__vector_20>:
}

// -- Interrupts -- 

ISR (USART0_RX_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	0b b6       	in	r0, 0x3b	; 59
 2aa:	0f 92       	push	r0
 2ac:	2f 93       	push	r18
 2ae:	3f 93       	push	r19
 2b0:	4f 93       	push	r20
 2b2:	5f 93       	push	r21
 2b4:	6f 93       	push	r22
 2b6:	7f 93       	push	r23
 2b8:	8f 93       	push	r24
 2ba:	9f 93       	push	r25
 2bc:	af 93       	push	r26
 2be:	bf 93       	push	r27
 2c0:	ef 93       	push	r30
 2c2:	ff 93       	push	r31
	uint8_t data;
	data = UDR0; // read data from buffer TODO: add check for overflow
 2c4:	20 91 c6 00 	lds	r18, 0x00C6
	
	
	
	if(data == 0x7e)
 2c8:	2e 37       	cpi	r18, 0x7E	; 126
 2ca:	99 f5       	brne	.+102    	; 0x332 <__vector_20+0x94>
	{
		if(gRxBufferIndex >= 4 || gRxBufferIndex == gRxBuffer[1] + 4) //TODO: add crc check
 2cc:	80 91 09 06 	lds	r24, 0x0609
 2d0:	90 91 0a 06 	lds	r25, 0x060A
 2d4:	84 30       	cpi	r24, 0x04	; 4
 2d6:	91 05       	cpc	r25, r1
 2d8:	40 f4       	brcc	.+16     	; 0x2ea <__vector_20+0x4c>
 2da:	20 91 01 01 	lds	r18, 0x0101
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	2c 5f       	subi	r18, 0xFC	; 252
 2e2:	3f 4f       	sbci	r19, 0xFF	; 255
 2e4:	82 17       	cp	r24, r18
 2e6:	93 07       	cpc	r25, r19
 2e8:	f9 f4       	brne	.+62     	; 0x328 <__vector_20+0x8a>
		{
			//TODO: add correct packet to FIFO or something	
			
			//temp
			 PORTA ^= (1<<PORTA1); // turn on/off led
 2ea:	92 b1       	in	r25, 0x02	; 2
 2ec:	82 e0       	ldi	r24, 0x02	; 2
 2ee:	89 27       	eor	r24, r25
 2f0:	82 b9       	out	0x02, r24	; 2
			//temp		
			
			
			for(int i = 0; i < gRxBuffer[1]; i++)
 2f2:	60 91 01 01 	lds	r22, 0x0101
 2f6:	26 2f       	mov	r18, r22
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	12 16       	cp	r1, r18
 2fc:	13 06       	cpc	r1, r19
 2fe:	64 f4       	brge	.+24     	; 0x318 <__vector_20+0x7a>
 300:	a2 e0       	ldi	r26, 0x02	; 2
 302:	b1 e0       	ldi	r27, 0x01	; 1
 304:	e5 e0       	ldi	r30, 0x05	; 5
 306:	f3 e0       	ldi	r31, 0x03	; 3
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
			{
				gTxPayload[i] = gRxBuffer[i+2];
 30c:	4d 91       	ld	r20, X+
 30e:	41 93       	st	Z+, r20
			//temp
			 PORTA ^= (1<<PORTA1); // turn on/off led
			//temp		
			
			
			for(int i = 0; i < gRxBuffer[1]; i++)
 310:	01 96       	adiw	r24, 0x01	; 1
 312:	82 17       	cp	r24, r18
 314:	93 07       	cpc	r25, r19
 316:	d4 f3       	brlt	.-12     	; 0x30c <__vector_20+0x6e>
			{
				gTxPayload[i] = gRxBuffer[i+2];
			} 
			sendPacket(gRxBuffer[0], gRxBuffer[1]);
 318:	80 91 00 01 	lds	r24, 0x0100
 31c:	4f df       	rcall	.-354    	; 0x1bc <sendPacket>
			
			
			gRxBufferIndex = 0;
 31e:	10 92 0a 06 	sts	0x060A, r1
 322:	10 92 09 06 	sts	0x0609, r1
 326:	12 c0       	rjmp	.+36     	; 0x34c <__vector_20+0xae>
		}else
		{
			gRxBufferIndex = 0; // can be optimized away...
 328:	10 92 0a 06 	sts	0x060A, r1
 32c:	10 92 09 06 	sts	0x0609, r1
 330:	0d c0       	rjmp	.+26     	; 0x34c <__vector_20+0xae>
		}
		
	}else
	{
		gRxBuffer[gRxBufferIndex] = data;
 332:	80 91 09 06 	lds	r24, 0x0609
 336:	90 91 0a 06 	lds	r25, 0x060A
 33a:	fc 01       	movw	r30, r24
 33c:	e0 50       	subi	r30, 0x00	; 0
 33e:	ff 4f       	sbci	r31, 0xFF	; 255
 340:	20 83       	st	Z, r18
		++gRxBufferIndex;
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	90 93 0a 06 	sts	0x060A, r25
 348:	80 93 09 06 	sts	0x0609, r24
	}
		
	
 34c:	ff 91       	pop	r31
 34e:	ef 91       	pop	r30
 350:	bf 91       	pop	r27
 352:	af 91       	pop	r26
 354:	9f 91       	pop	r25
 356:	8f 91       	pop	r24
 358:	7f 91       	pop	r23
 35a:	6f 91       	pop	r22
 35c:	5f 91       	pop	r21
 35e:	4f 91       	pop	r20
 360:	3f 91       	pop	r19
 362:	2f 91       	pop	r18
 364:	0f 90       	pop	r0
 366:	0b be       	out	0x3b, r0	; 59
 368:	0f 90       	pop	r0
 36a:	0f be       	out	0x3f, r0	; 63
 36c:	0f 90       	pop	r0
 36e:	1f 90       	pop	r1
 370:	18 95       	reti

00000372 <_exit>:
 372:	f8 94       	cli

00000374 <__stop_program>:
 374:	ff cf       	rjmp	.-2      	; 0x374 <__stop_program>

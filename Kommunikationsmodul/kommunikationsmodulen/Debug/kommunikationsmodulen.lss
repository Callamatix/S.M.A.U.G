
kommunikationsmodulen.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000304  00800100  00800100  0000037a  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000adf  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000070  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000453  00000000  00000000  00000b7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000001da  00000000  00000000  00000fd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000047d  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000130  00000000  00000000  00001628  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001d2  00000000  00000000  00001758  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000004e7  00000000  00000000  0000192a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000060  00000000  00000000  00001e11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	34 c1       	rjmp	.+616    	; 0x2ba <__vector_20>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	24 e0       	ldi	r18, 0x04	; 4
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a4 30       	cpi	r26, 0x04	; 4
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	d8 d0       	rcall	.+432    	; 0x25a <main>
  aa:	1b c1       	rjmp	.+566    	; 0x2e2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <init>:
	}
	WriteByte(0x00);
	WriteByte(0x00);
	WriteByte(0x7e);
	
}
  ae:	81 b1       	in	r24, 0x01	; 1
  b0:	83 60       	ori	r24, 0x03	; 3
  b2:	81 b9       	out	0x01, r24	; 1
  b4:	08 95       	ret

000000b6 <initSerial>:
  b6:	10 92 c5 00 	sts	0x00C5, r1
  ba:	89 e0       	ldi	r24, 0x09	; 9
  bc:	80 93 c4 00 	sts	0x00C4, r24
  c0:	88 e9       	ldi	r24, 0x98	; 152
  c2:	80 93 c1 00 	sts	0x00C1, r24
  c6:	86 e0       	ldi	r24, 0x06	; 6
  c8:	80 93 c2 00 	sts	0x00C2, r24
  cc:	08 95       	ret

000000ce <CheckTxReady>:
  ce:	80 91 c0 00 	lds	r24, 0x00C0
  d2:	80 72       	andi	r24, 0x20	; 32
  d4:	08 95       	ret

000000d6 <WriteByte>:
  d6:	cf 93       	push	r28
  d8:	c8 2f       	mov	r28, r24
  da:	f9 df       	rcall	.-14     	; 0xce <CheckTxReady>
  dc:	88 23       	and	r24, r24
  de:	e9 f3       	breq	.-6      	; 0xda <WriteByte+0x4>
  e0:	c0 93 c6 00 	sts	0x00C6, r28
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <crc16>:
  e8:	cf 92       	push	r12
  ea:	df 92       	push	r13
  ec:	ef 92       	push	r14
  ee:	ff 92       	push	r15
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	66 23       	and	r22, r22
  fa:	09 f4       	brne	.+2      	; 0xfe <crc16+0x16>
  fc:	3e c0       	rjmp	.+124    	; 0x17a <crc16+0x92>
  fe:	06 2f       	mov	r16, r22
 100:	10 e0       	ldi	r17, 0x00	; 0
 102:	4f ef       	ldi	r20, 0xFF	; 255
 104:	5f ef       	ldi	r21, 0xFF	; 255
 106:	ee ef       	ldi	r30, 0xFE	; 254
 108:	ff ef       	ldi	r31, 0xFF	; 255
 10a:	c6 2e       	mov	r12, r22
 10c:	d1 2c       	mov	r13, r1
 10e:	e8 2e       	mov	r14, r24
 110:	f1 2c       	mov	r15, r1
 112:	c8 e0       	ldi	r28, 0x08	; 8
 114:	d0 e0       	ldi	r29, 0x00	; 0
 116:	ee 3f       	cpi	r30, 0xFE	; 254
 118:	6f ef       	ldi	r22, 0xFF	; 255
 11a:	f6 07       	cpc	r31, r22
 11c:	19 f4       	brne	.+6      	; 0x124 <crc16+0x3c>
 11e:	8e 2d       	mov	r24, r14
 120:	9f 2d       	mov	r25, r15
 122:	30 c0       	rjmp	.+96     	; 0x184 <crc16+0x9c>
 124:	ef 3f       	cpi	r30, 0xFF	; 255
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	f8 07       	cpc	r31, r24
 12a:	19 f4       	brne	.+6      	; 0x132 <crc16+0x4a>
 12c:	8c 2d       	mov	r24, r12
 12e:	9d 2d       	mov	r25, r13
 130:	29 c0       	rjmp	.+82     	; 0x184 <crc16+0x9c>
 132:	df 01       	movw	r26, r30
 134:	a0 50       	subi	r26, 0x00	; 0
 136:	bf 4f       	sbci	r27, 0xFF	; 255
 138:	8c 91       	ld	r24, X
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	23 c0       	rjmp	.+70     	; 0x184 <crc16+0x9c>
 13e:	ba 01       	movw	r22, r20
 140:	68 27       	eor	r22, r24
 142:	79 27       	eor	r23, r25
 144:	60 ff       	sbrs	r22, 0
 146:	07 c0       	rjmp	.+14     	; 0x156 <crc16+0x6e>
 148:	56 95       	lsr	r21
 14a:	47 95       	ror	r20
 14c:	68 e0       	ldi	r22, 0x08	; 8
 14e:	46 27       	eor	r20, r22
 150:	64 e8       	ldi	r22, 0x84	; 132
 152:	56 27       	eor	r21, r22
 154:	02 c0       	rjmp	.+4      	; 0x15a <crc16+0x72>
 156:	56 95       	lsr	r21
 158:	47 95       	ror	r20
 15a:	96 95       	lsr	r25
 15c:	87 95       	ror	r24
 15e:	21 50       	subi	r18, 0x01	; 1
 160:	31 09       	sbc	r19, r1
 162:	69 f7       	brne	.-38     	; 0x13e <crc16+0x56>
 164:	31 96       	adiw	r30, 0x01	; 1
 166:	e0 17       	cp	r30, r16
 168:	f1 07       	cpc	r31, r17
 16a:	a9 f6       	brne	.-86     	; 0x116 <crc16+0x2e>
 16c:	9a 01       	movw	r18, r20
 16e:	20 95       	com	r18
 170:	30 95       	com	r19
 172:	32 27       	eor	r19, r18
 174:	23 27       	eor	r18, r19
 176:	32 27       	eor	r19, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <crc16+0x96>
 17a:	20 e0       	ldi	r18, 0x00	; 0
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	82 2f       	mov	r24, r18
 180:	93 2f       	mov	r25, r19
 182:	02 c0       	rjmp	.+4      	; 0x188 <crc16+0xa0>
 184:	9e 01       	movw	r18, r28
 186:	db cf       	rjmp	.-74     	; 0x13e <crc16+0x56>
 188:	df 91       	pop	r29
 18a:	cf 91       	pop	r28
 18c:	1f 91       	pop	r17
 18e:	0f 91       	pop	r16
 190:	ff 90       	pop	r15
 192:	ef 90       	pop	r14
 194:	df 90       	pop	r13
 196:	cf 90       	pop	r12
 198:	08 95       	ret

0000019a <sendPacket>:
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	9e e7       	ldi	r25, 0x7E	; 126
 1a4:	90 93 ff 01 	sts	0x01FF, r25
 1a8:	80 93 00 02 	sts	0x0200, r24
 1ac:	60 93 01 02 	sts	0x0201, r22
 1b0:	26 2f       	mov	r18, r22
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	12 16       	cp	r1, r18
 1b6:	13 06       	cpc	r1, r19
 1b8:	4c f5       	brge	.+82     	; 0x20c <sendPacket+0x72>
 1ba:	e0 e0       	ldi	r30, 0x00	; 0
 1bc:	f1 e0       	ldi	r31, 0x01	; 1
 1be:	03 e0       	ldi	r16, 0x03	; 3
 1c0:	10 e0       	ldi	r17, 0x00	; 0
 1c2:	c0 e0       	ldi	r28, 0x00	; 0
 1c4:	d0 e0       	ldi	r29, 0x00	; 0
 1c6:	7d e7       	ldi	r23, 0x7D	; 125
 1c8:	50 e2       	ldi	r21, 0x20	; 32
 1ca:	90 81       	ld	r25, Z
 1cc:	49 2f       	mov	r20, r25
 1ce:	4d 57       	subi	r20, 0x7D	; 125
 1d0:	42 30       	cpi	r20, 0x02	; 2
 1d2:	80 f4       	brcc	.+32     	; 0x1f4 <sendPacket+0x5a>
 1d4:	d8 01       	movw	r26, r16
 1d6:	a1 50       	subi	r26, 0x01	; 1
 1d8:	be 4f       	sbci	r27, 0xFE	; 254
 1da:	ac 0f       	add	r26, r28
 1dc:	bd 1f       	adc	r27, r29
 1de:	7c 93       	st	X, r23
 1e0:	0f 5f       	subi	r16, 0xFF	; 255
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	d8 01       	movw	r26, r16
 1e6:	a1 50       	subi	r26, 0x01	; 1
 1e8:	be 4f       	sbci	r27, 0xFE	; 254
 1ea:	ac 0f       	add	r26, r28
 1ec:	bd 1f       	adc	r27, r29
 1ee:	95 27       	eor	r25, r21
 1f0:	9c 93       	st	X, r25
 1f2:	06 c0       	rjmp	.+12     	; 0x200 <sendPacket+0x66>
 1f4:	d8 01       	movw	r26, r16
 1f6:	a1 50       	subi	r26, 0x01	; 1
 1f8:	be 4f       	sbci	r27, 0xFE	; 254
 1fa:	ac 0f       	add	r26, r28
 1fc:	bd 1f       	adc	r27, r29
 1fe:	9c 93       	st	X, r25
 200:	21 96       	adiw	r28, 0x01	; 1
 202:	31 96       	adiw	r30, 0x01	; 1
 204:	c2 17       	cp	r28, r18
 206:	d3 07       	cpc	r29, r19
 208:	01 f7       	brne	.-64     	; 0x1ca <sendPacket+0x30>
 20a:	04 c0       	rjmp	.+8      	; 0x214 <sendPacket+0x7a>
 20c:	03 e0       	ldi	r16, 0x03	; 3
 20e:	10 e0       	ldi	r17, 0x00	; 0
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	d0 e0       	ldi	r29, 0x00	; 0
 214:	69 df       	rcall	.-302    	; 0xe8 <crc16>
 216:	f8 01       	movw	r30, r16
 218:	e1 50       	subi	r30, 0x01	; 1
 21a:	fe 4f       	sbci	r31, 0xFE	; 254
 21c:	ec 0f       	add	r30, r28
 21e:	fd 1f       	adc	r31, r29
 220:	90 83       	st	Z, r25
 222:	81 83       	std	Z+1, r24	; 0x01
 224:	22 96       	adiw	r28, 0x02	; 2
 226:	0c 0f       	add	r16, r28
 228:	1d 1f       	adc	r17, r29
 22a:	f8 01       	movw	r30, r16
 22c:	e1 50       	subi	r30, 0x01	; 1
 22e:	fe 4f       	sbci	r31, 0xFE	; 254
 230:	8e e7       	ldi	r24, 0x7E	; 126
 232:	80 83       	st	Z, r24
 234:	c8 01       	movw	r24, r16
 236:	01 96       	adiw	r24, 0x01	; 1
 238:	18 16       	cp	r1, r24
 23a:	19 06       	cpc	r1, r25
 23c:	4c f4       	brge	.+18     	; 0x250 <sendPacket+0xb6>
 23e:	cf ef       	ldi	r28, 0xFF	; 255
 240:	d1 e0       	ldi	r29, 0x01	; 1
 242:	00 50       	subi	r16, 0x00	; 0
 244:	1e 4f       	sbci	r17, 0xFE	; 254
 246:	89 91       	ld	r24, Y+
 248:	46 df       	rcall	.-372    	; 0xd6 <WriteByte>
 24a:	c0 17       	cp	r28, r16
 24c:	d1 07       	cpc	r29, r17
 24e:	d9 f7       	brne	.-10     	; 0x246 <sendPacket+0xac>
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	08 95       	ret

0000025a <main>:

int main(void)
{
	init();
 25a:	29 df       	rcall	.-430    	; 0xae <init>
	initSerial();
 25c:	2c df       	rcall	.-424    	; 0xb6 <initSerial>
	sei();
 25e:	78 94       	sei
	
	
	
    while(1)
    {
		PORTA ^= (1<<PORTA0);
 260:	aa 24       	eor	r10, r10
 262:	a3 94       	inc	r10
		gTxPayload[0] = 'p';
 264:	0f 2e       	mov	r0, r31
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	ef 2e       	mov	r14, r31
 26a:	f1 e0       	ldi	r31, 0x01	; 1
 26c:	ff 2e       	mov	r15, r31
 26e:	f0 2d       	mov	r31, r0
 270:	0f 2e       	mov	r0, r31
 272:	f0 e7       	ldi	r31, 0x70	; 112
 274:	bf 2e       	mov	r11, r31
 276:	f0 2d       	mov	r31, r0
		gTxPayload[1] = 'a';
 278:	01 e0       	ldi	r16, 0x01	; 1
 27a:	11 e0       	ldi	r17, 0x01	; 1
 27c:	0f 2e       	mov	r0, r31
 27e:	f1 e6       	ldi	r31, 0x61	; 97
 280:	cf 2e       	mov	r12, r31
 282:	f0 2d       	mov	r31, r0
		gTxPayload[2] = 'j';
 284:	c2 e0       	ldi	r28, 0x02	; 2
 286:	d1 e0       	ldi	r29, 0x01	; 1
 288:	0f 2e       	mov	r0, r31
 28a:	fa e6       	ldi	r31, 0x6A	; 106
 28c:	df 2e       	mov	r13, r31
 28e:	f0 2d       	mov	r31, r0
	
	
	
    while(1)
    {
		PORTA ^= (1<<PORTA0);
 290:	82 b1       	in	r24, 0x02	; 2
 292:	8a 25       	eor	r24, r10
 294:	82 b9       	out	0x02, r24	; 2
		gTxPayload[0] = 'p';
 296:	f7 01       	movw	r30, r14
 298:	b0 82       	st	Z, r11
		gTxPayload[1] = 'a';
 29a:	f8 01       	movw	r30, r16
 29c:	c0 82       	st	Z, r12
		gTxPayload[2] = 'j';
 29e:	d8 82       	st	Y, r13
		
		sendPacket('M', 3);
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	8d e4       	ldi	r24, 0x4D	; 77
 2a4:	7a df       	rcall	.-268    	; 0x19a <sendPacket>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a6:	ff ef       	ldi	r31, 0xFF	; 255
 2a8:	2f e3       	ldi	r18, 0x3F	; 63
 2aa:	88 e3       	ldi	r24, 0x38	; 56
 2ac:	f1 50       	subi	r31, 0x01	; 1
 2ae:	20 40       	sbci	r18, 0x00	; 0
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <main+0x52>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <main+0x5c>
 2b6:	00 00       	nop
 2b8:	eb cf       	rjmp	.-42     	; 0x290 <main+0x36>

000002ba <__vector_20>:
}

// -- Interrupts -- 

ISR (USART0_RX_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
	int8_t dummy;
	dummy = UDR0;
 2c8:	80 91 c6 00 	lds	r24, 0x00C6
	if (dummy) {}
	PORTA ^= (1<<PORTA1);
 2cc:	92 b1       	in	r25, 0x02	; 2
 2ce:	82 e0       	ldi	r24, 0x02	; 2
 2d0:	89 27       	eor	r24, r25
 2d2:	82 b9       	out	0x02, r24	; 2
	
	
	
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
